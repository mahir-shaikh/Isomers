import { EventEmitter } from '@angular/core';
import { Response, Http } from '@angular/http';
import { Observable } from 'rxjs/Rx';
import { ContentObject, COSection } from '../../common/classes/contentobject';
export declare class GatewayService {
    private http;
    private programKey;
    private stateKey;
    loadingMyPrograms: boolean;
    loadingEventConfig: boolean;
    private observable;
    private rHObservable;
    private tKObservable;
    private eventConfigObservable;
    myProgram: ContentObject;
    resources: ContentObject;
    recentHistory: ContentObject[];
    secActions: Array<COSection>;
    selectedActions: Array<COSection>;
    private dashboardState;
    newCOParent: ContentObject;
    eventIcons: Array<string>;
    modules: Array<any>;
    iconsPath: string;
    moduleList: Array<any>;
    topicList: Array<any>;
    currLanguage: string;
    textConfig: any;
    languages: Array<any>;
    allCONames: Array<any>;
    questions: Array<string>;
    notifications: Array<any>;
    eventConfig: any;
    hierarchyKey: string;
    moduleKey: string;
    topicKey: string;
    sectionKey: string;
    favouriteKey: string;
    hostname: string;
    baseUrl: string;
    eventsUrl: string;
    wizerServer: string;
    stateChange: EventEmitter<string>;
    constructor(http: Http);
    get(url: any): Observable<Response>;
    getMyPrograms(eventId: number, isAuthoring: boolean): Observable<ContentObject>;
    getRecentHistory(): Observable<ContentObject[]>;
    getEnrolledModuleCount(): number;
    changeLanguage(eventId: number, languageKey: string): Observable<any>;
    private extractRecentHistory(res);
    getResources(): ContentObject;
    deleteCO(coId: any): void;
    saveCOSequence(program: any): void;
    postRequest(url: string, body: any): Observable<any>;
    saveCO(program: ContentObject, eventId: string, parentCoId: Number, languageId: Number): Observable<any>;
    convertMetadataFormat(program: ContentObject): {
        "id": number;
        "name": string;
        "metadata": any[];
        "section": COSection[];
    };
    private extractData(res);
    getNotifications(): any[];
    private setExpandedState(obj);
    setCOToLocalStorage(co: ContentObject): void;
    setStateToLocalStorage(state: string): void;
    getCoById(co: ContentObject, id: number): ContentObject;
    getCoByName(co: ContentObject, name: string): ContentObject;
    getCoByPath(co: ContentObject, path: string): ContentObject;
    setState(state: string): void;
    initializeData(co: ContentObject, parentCO?: ContentObject): ContentObject;
    htmlDecode(value: string): string;
    createObservable(data: any): Observable<any>;
    private handleError(error);
    loadEventConfig(eventName: string, eventId: number): Observable<any>;
    extractEventConfig(data: any): any;
    modData: {
        idx: any;
        modName: any;
        sysName: any;
        editMode: boolean;
        curModule: any;
        criteriaList: {
            makeVisible: any[];
            makeInvisible: any[];
            scheduledModule: any;
            scheduledModuleId: any;
        };
        enrollable: any;
        schedulable: any;
    };
    topData: {
        idx: any;
        mIdx: any;
        modName: any;
        topName: any;
        sysName: any;
        topDesc: any;
        topDuration: any;
        topPoints: any;
        topIconFile: any;
        topIsNew: boolean;
        editMode: boolean;
        curTopic: any;
        description: any;
        newParent: {
            title: any;
            id: any;
        };
        topIcon: any;
    };
    secData: {
        idx: any;
        mIdx: any;
        tIdx: any;
        modName: any;
        modId: any;
        topName: any;
        topId: any;
        secName: any;
        sysName: any;
        secDuration: any;
        secPoints: any;
        secIconFile: any;
        secLevel: any;
        secLevelImage: any;
        secType: any;
        secIsNew: boolean;
        secJump: boolean;
        editMode: boolean;
        curSection: any;
        secDesc: any;
        selectedActions: any;
        newParent: {
            title: any;
            id: any;
        };
        secIcon: any;
        criteriaList: {
            makeVisible: any[];
            makeInvisible: any[];
            makeAvailable: any[];
            removeAccess: any[];
        };
    };
    testFunctionHere(): string;
    genUUID(optChar: string): string;
    genUUStr(myStr: string): string;
    _observableEmitter: any;
    emitData(key: any, opts: any): void;
    getEmitter(key: any): any;
    saveIcon(iconFile: any, eventId: any, name: any): Observable<any>;
    jumpToContent(path: any): void;
    logout(): void;
    saveFavourite(coId: string, isFavourite: boolean): Observable<any>;
    private extractTextConfig(res);
    getTextConfig(eventId: number): any;
    saveTextConfig(textConfig: any, eventId: string): Observable<any>;
    saveEnrollScheduleCriterias(maxModules: Number, criterias: Array<any>, enrollable: boolean, schedulable: boolean, id: number): Observable<any>;
    saveModuleEnrolledState(id: number): Observable<any>;
    getLanguageName(): string;
    getLanguages(): any[];
    getMonthWiseAvailable(moduleName: string, firstDay: string): Observable<any>;
    getAvailableSession(moduleName: string, date: string): Observable<any>;
    scheduleParticipant(coId: number, sessionId: number, moduleName: string, timezoneOffset: number, timezoneName: string): Observable<any>;
    dismissNotifications(notificationIds: Array<number>): Observable<any>;
    getAllCONames(): Array<any>;
    traverseProgramCOs(co: any): void;
    configureGatewayService(configuration: GatewayServiceConfig): void;
}
export interface GatewayServiceConfig {
    hostname: string;
    serviceUrl: string;
    eventsUrl: string;
    wizerServer: string;
}
